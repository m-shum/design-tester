@use 'sass:math';
@use 'sass:map';
@use './_breakpoints.scss' as *;

// Viewport size when fontsize starts to increase: x1
// Viewport size when fontsize stops increasing: x2
// Min base fontsize: y1
// Max base fontsize: y2
// Relative desired fontsize: v(vw) + r(rem/px/em/whatever font-size units are for min & max)
// v = 100 * (y2 - y1) / (x2 - x1)
// r = (x1 * y2 – x2 * y1) / (x1 - x2)

// $font-base and $viewport units must be the same – pixels. Units have been stripped for simplicity

$type-scale: 1.414; // TODO (big maybe): dynamic type-scale based on viewport?

$font-base: (
  'min': 14,
  'max': 18,
);
$viewport: (
  'min': 768,
  'max': 1599,
);

@function get-font-size($mag) {
  $magnitude: math.abs($mag);

  $scale-start: map.get($viewport, 'min');
  $scale-end: map.get($viewport, 'max');

  $min-font-size: map.get($font-base, 'min');
  $max-font-size: map.get($font-base, 'max');

  @for $i from 1 through $magnitude {
    @if $mag < 1 {
      $min-font-size: math.div($min-font-size, $type-scale);
      $max-font-size: math.div($max-font-size, $type-scale);
    } @else if $mag > 1 {
      $min-font-size: $min-font-size * $type-scale;
      $max-font-size: $max-font-size * $type-scale;
    }
  }

  $relative-vw: 100 *
    math.div(($max-font-size - $min-font-size), ($scale-end - $scale-start));

  $relative-font-size: math.div(
    $scale-start * $max-font-size - $scale-end * $min-font-size,
    $scale-start - $scale-end
  );
  // To make the font sizes more accessible, convert into rem (divide by 16)
  $min-font-size: math.div($min-font-size, 16);
  $max-font-size: math.div($max-font-size, 16);
  $relative-font-size: math.div($relative-font-size, 16);

  @return clamp(
    #{$min-font-size}rem,
    #{$relative-vw}vw + #{$relative-font-size}rem,
    #{$max-font-size}rem
  );
}

:root {
  --body-copy: #{get-font-size(1)};
  --text-h3: #{get-font-size(2)};
  --text-h2: #{get-font-size(3)};
  --text-h4: #{get-font-size(4)};
  --base-line-height: calc(#{get-font-size(1)} * 1.4);
}

@mixin align-to-baseline($size, $baselines, $lines-beneath) {
  $base-line-height: calc(#{get-font-size(1)} * 1.4);
  $baseline-shift: calc(
    calc(calc($baselines * (#{get-font-size(1)} * 1.4)) - 1cap) / 2
  );
  $baseline-push: calc(
    calc($lines-beneath * (#{get-font-size(1)} * 1.4)) - $baseline-shift
  );
  & {
    line-height: calc(#{$baselines} * #{$base-line-height});
    padding-top: $baseline-shift;
    margin-bottom: $baseline-push;
  }
}
